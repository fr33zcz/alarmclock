package alarmclock;

import java.io.IOException;
import java.io.Writer;

public interface IXmlWriter {
	/**
	 * Begin to output an entity. 
	 *
	 * @param name name of entity.
	 * 
	 * @throws IOException
	 */
	public XmlWriter writeEntity(String name) throws IOException;

	/**
	 * Write an attribute out for the current entity. 
	 * Any XML characters in the value are escaped.
	 * Currently it does not actually throw the exception, but 
	 * the API is set that way for future changes.
	 *
	 * @param  attr   name of attribute (when it's null new StringBuffer() is called on it)
	 * @param  value  value of attribute.
	 * 
	 * @throws IOException when attrs.append() fails
	 */
	public XmlWriter writeAttribute(String attr, String value);
	
	/**
	 * End the current entity. This will throw an exception 
	 * if it is called when there is not a currently open 
	 * entity.
	 * 
	 * @throws IOException when stack is empty or writer.write() fails
	 */
	public XmlWriter endEntity() throws IOException;
	
	/**
	 * Close this writer. It does not close the underlying 
	 * writer, but does throw an exception if there are 
	 * as yet unclosed tags.
	 * 
	 * @throws IOException when stack is not empty
	 */
	public void close() throws IOException;
	
	/**
	 * Output body text. Any XML characters are escaped.
	 * 
	 * @throws IOException when writer.write() fails 
	 */
	public XmlWriter writeText(String text) throws IOException;

	/**
	 * Save XML generated by XmlWriter to file
	 * 
	 * @param writer
	 * @param filename
	 * 
	 * @throws IOException when couldn't replace the file
	 */
	public void saveToFile(Writer writer, String filename) throws IOException;	
}
